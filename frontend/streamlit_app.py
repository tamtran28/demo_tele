import json, urllib.parse, time, requests, os
import streamlit as st

# =========================
# C·∫§U H√åNH
# =========================
BACKEND_URL = os.getenv("BACKEND_URL", "https://<YOUR_BACKEND_HOST>")

st.set_page_config(page_title="Telegram Mini App (Streamlit)", layout="wide")
st.title("Telegram Mini App ‚Äì Streamlit Frontend")

# --- Nh√∫ng JS Telegram SDK v√† l·∫•y initData ---
# √ù t∆∞·ªüng: l·∫ßn ƒë·∫ßu v√†o, n·∫øu URL ch∆∞a c√≥ ?initData=... th√¨ JS s·∫Ω:
# 1) ƒë·ªçc window.Telegram.WebApp.initData
# 2) redirect c√πng URL + ?initData=... ƒë·ªÉ Streamlit (Python) ƒë·ªçc ƒë∆∞·ª£c
telegram_script = """
<script src="https://telegram.org/js/telegram-web-app.js"></script>
<script>
(function() {
  try {
    const tg = window.Telegram.WebApp;
    tg.expand();

    // N·∫øu URL CH∆ØA c√≥ initData th√¨ th√™m v√†o
    const url = new URL(window.location.href);
    if (!url.searchParams.get("initData")) {
      const initData = tg.initData || "";
      // Optional: th√™m start_param -> Python c√≥ th·ªÉ l·∫•y b·∫±ng initDataUnsafe.start_param
      url.searchParams.set("initData", encodeURIComponent(initData));
      window.location.replace(url.toString());
    }
  } catch(e) {
    console.error("Init Telegram failed", e);
  }
})();
</script>
"""
st.markdown(telegram_script, unsafe_allow_html=True)

# ƒê·ªçc initData t·ª´ query string
query_params = st.query_params
init_data_encoded = query_params.get("initData", [""])[0] if isinstance(query_params.get("initData", ""), list) else query_params.get("initData", "")
# v√¨ ·ªü script ƒë√£ encodeURIComponent 2 l·∫ßn (SDK -> URL), ta decode 1 l·∫ßn
try:
    init_data = urllib.parse.unquote(init_data_encoded)
except:
    init_data = init_data_encoded

with st.expander("Debug initData (raw)"):
    st.code(init_data or "NO_INIT_DATA", language="text")

# G·ªçi API backend verify initData
col1, col2 = st.columns(2)
with col1:
    if st.button("‚úÖ Verify initData v·ªõi Backend"):
        if not init_data:
            st.error("Ch∆∞a c√≥ initData (m·ªü t·ª´ Telegram Bot ƒë·ªÉ c√≥).")
        else:
            try:
                r = requests.post(f"{BACKEND_URL}/verify-init", json={"initData": init_data}, timeout=10)
                data = r.json()
                if data.get("ok"):
                    st.success("H·ª£p l·ªá ‚úÖ")
                else:
                    st.error("Kh√¥ng h·ª£p l·ªá ‚ùå: " + str(data.get("error", "")))
            except Exception as e:
                st.error(f"L·ªói g·ªçi backend: {e}")

with col2:
    note = st.text_input("Nh·∫≠p ghi ch√∫ g·ª≠i v·ªÅ Bot (sendData)")
    # N√∫t g·ªçi tg.sendData b·∫±ng JS
    send_js = f"""
    <script>
    function sendData() {{
      try {{
        const tg = window.Telegram.WebApp;
        const payload = {{
          type: 'note', text: {json.dumps(note)}, ts: Date.now()
        }};
        tg.sendData(JSON.stringify(payload));
        tg.HapticFeedback.impactOccurred('light');
      }} catch(e) {{
        alert('Kh√¥ng ph·∫£i Telegram WebApp ho·∫∑c l·ªói: ' + e);
      }}
    }}
    </script>
    <button onclick="sendData()">G·ª≠i v·ªÅ Bot (sendData)</button>
    """
    st.markdown(send_js, unsafe_allow_html=True)

st.info("üëâ H√£y m·ªü Mini App t·ª´ Bot (Menu ho·∫∑c deep-link) ƒë·ªÉ c√≥ `initData`. Sau ƒë√≥ b·∫•m Verify.")

st.divider()
st.caption("Demo: Streamlit nh·∫≠n initData qua JS ‚Üí query params ‚Üí Python; g·ª≠i data cho Bot b·∫±ng tg.sendData().")
